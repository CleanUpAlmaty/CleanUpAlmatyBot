import logging
import os
from datetime import datetime, time
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters, ContextTypes
from telegram.error import TimedOut
from asgiref.sync import sync_to_async
from django.db import transaction 
from django.utils import timezone
import asyncio
import traceback
import aiofiles 

from core.models import User, Project, VolunteerProject, Task, TaskAssignment, Photo

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
TITLE, DESCRIPTION, CITY, TAGS = range(4)
SELECT_PROJECT, SELECT_RECIPIENTS, SELECT_VOLUNTEERS, TASK_TEXT, TASK_DEADLINE_DATE, TASK_DEADLINE_START_TIME, TASK_DEADLINE_END_TIME, TASK_PHOTO, TASK_PHOTO_UPLOAD, CONFIRM_TASK, FEEDBACK = range(11)
MODERATE_PHOTO, MODERATE_PHOTO_ACTION = range(2)

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
PHOTOS_PER_PAGE = 5

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤
def get_org_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="create_project"),
         InlineKeyboardButton("üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤", callback_data="manage_volunteers")],
        [InlineKeyboardButton("üìå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="send_task"),
         InlineKeyboardButton("üñºÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="check_photos")]
    ])

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å sync_to_async
@sync_to_async
def get_user(telegram_id):
    try:
        user = User.objects.get(telegram_id=telegram_id)
        logger.info(f"User found: {user.username} (telegram_id: {telegram_id})")
        return user
    except User.DoesNotExist:
        logger.warning(f"User not found with telegram_id: {telegram_id}")
        return None

@sync_to_async
def get_admin():
    try:
        admin = User.objects.filter(is_staff=True).first()
        if admin:
            logger.info(f"Admin found: {admin.username}")
            return admin
        else:
            logger.warning("No admin found")
            return None
    except Exception as e:
        logger.error(f"Error fetching admin: {e}\n{traceback.format_exc()}")
        return None

@sync_to_async
def create_project(title, description, city, tags, creator):
    logger.info(f"Creating project: {title} by {creator.username}")
    try:
        project = Project.objects.create(
            title=title,
            description=description,
            city=city,
            creator=creator,
            status='pending'
        )
        project.tags.add(*tags.split(','))
        logger.info(f"Project created: {project.title} (id: {project.id})")
        return project
    except Exception as e:
        logger.error(f"Error creating project: {e}\n{traceback.format_exc()}")
        raise

@sync_to_async
def get_volunteers_for_project(creator):
    logger.info(f"Fetching volunteers for creator: {creator.username}")
    try:
        projects = Project.objects.filter(creator=creator).prefetch_related('volunteer_projects__volunteer')
        result = []
        for project in projects:
            volunteers = [vp.volunteer.username for vp in project.volunteer_projects.all()]
            result.append((project.title, volunteers))
        logger.info(f"Found {len(result)} projects with volunteers for {creator.username}")
        return result
    except Exception as e:
        logger.error(f"Error fetching volunteers: {e}\n{traceback.format_exc()}")
        raise

@sync_to_async
def get_organizer_projects(organizer):
    logger.info(f"Fetching projects for organizer: {organizer.username}")
    try:
        projects = Project.objects.filter(creator=organizer, status='approved')
        result = [(project, project.title) for project in projects]
        logger.info(f"Found {len(result)} projects for organizer {organizer.username}: {[p[1] for p in result]}")
        return result
    except Exception as e:
        logger.error(f"Error fetching organizer projects: {e}\n{traceback.format_exc()}")
        raise

@sync_to_async
def get_project_volunteers(project):
    logger.info(f"Fetching volunteers for project: {project.title} (id: {project.id})")
    try:
        volunteer_projects = VolunteerProject.objects.filter(project=project, is_active=True).select_related('volunteer')
        logger.info(f"Found {volunteer_projects.count()} VolunteerProject records")
        for vp in volunteer_projects:
            logger.info(f"VolunteerProject id={vp.id}, volunteer={vp.volunteer.username if vp.volunteer else 'None'}, is_active={vp.is_active}")
        result = []
        for vp in volunteer_projects:
            if vp.volunteer:
                logger.info(f"Found volunteer: {vp.volunteer.username} (telegram_id: {vp.volunteer.telegram_id})")
                result.append((vp.volunteer, vp.volunteer.username, vp.volunteer.telegram_id))
            else:
                logger.warning(f"VolunteerProject {vp.id} has no volunteer")
        logger.info(f"Total volunteers found: {len(result)}")
        return result
    except Exception as e:
        logger.error(f"Error fetching project volunteers: {e}\n{traceback.format_exc()}")
        raise

@sync_to_async
def create_task(project, creator, text, deadline_date, start_time, end_time, photo_path=None):
    logger.info(f"Creating task for project: {project.title} by {creator.username}")
    try:
        task = Task.objects.create(project=project, creator=creator, text=text, deadline_date=deadline_date, start_time=start_time, end_time=end_time)
        if photo_path:
            task.task_image = photo_path
            task.save()
        logger.info(f"Task created: {task.id}")
        return task
    except Exception as e:
        logger.error(f"Error creating task: {e}\n{traceback.format_exc()}")
        raise

@sync_to_async
def get_pending_photos_for_organizer(organizer, page=0, per_page=PHOTOS_PER_PAGE):
    logger.info(f"Fetching pending photos for organizer: {organizer.username}, page: {page}")
    try:
        photos = Photo.objects.filter(project__creator=organizer, status='pending').select_related('volunteer', 'project', 'task')
        total = photos.count()
        photos = photos[page * per_page:(page + 1) * per_page]
        result = [(photo, photo.volunteer.username, photo.project.title, photo.task) for photo in photos]
        logger.info(f"Found {len(result)} pending photos for organizer {organizer.username} on page {page}")
        return result, total
    except Exception as e:
        logger.error(f"Error fetching pending photos: {e}\n{traceback.format_exc()}")
        raise

@sync_to_async
def approve_photo(photo):
    logger.info(f"Approving photo from {photo.volunteer.username} for project {photo.project.title}")
    try:
        photo.status = 'approved'
        photo.moderated_at = timezone.now()
        photo.save()
        logger.info(f"Photo approved: {photo.id}")
    except Exception as e:
        logger.error(f"Error approving photo: {e}\n{traceback.format_exc()}")
        raise

async def reject_photo(photo, context):
    logger.info(f"Rejecting photo from {photo.volunteer.username} for project {photo.project.title}")
    try:
        photo.status = 'rejected'
        photo.moderated_at = timezone.now()
        await sync_to_async(photo.save)()
        logger.info("Photo rejected")

        if photo.volunteer.telegram_id:
            await context.bot.send_message(
                chat_id=photo.volunteer.telegram_id,
                text=f"–í–∞—à–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {photo.project.title} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º."
            )
    except Exception as e:
        logger.error(f"Error rejecting photo: {e}\n{traceback.format_exc()}")
        raise


async def notify_organizer_status(user, context):
    try:
        if user.telegram_id:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ telegram_id –Ω–µ –ø—É—Å—Ç–æ–π
            if user.is_organizer:
                await context.bot.send_message(
                    chat_id=user.telegram_id,
                    text="–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç–∞—Ç—É—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –æ–¥–æ–±—Ä–µ–Ω!"
                )
                logger.info(f"Notification sent to {user.username}: Status approved")
            else:
                await context.bot.send_message(
                    chat_id=user.telegram_id,
                    text="–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç–∞—Ç—É—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –æ—Ç–∫–ª–æ–Ω—ë–Ω."
                )
                logger.info(f"Notification sent to {user.username}: Status rejected")
        else:
            logger.warning(f"No telegram_id for user {user.username}, notification not sent")
    except Exception as e:
        logger.error(f"Error notifying user {user.username}: {e}\n{traceback.format_exc()}")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
def create_year_keyboard():
    current_year = datetime.now().year
    years = list(range(current_year, current_year + 6))
    buttons = [
        [InlineKeyboardButton(str(year), callback_data=f"deadline_date_year_{year}")]
        for year in years
    ]
    buttons.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task")])
    return InlineKeyboardMarkup(buttons)

def create_month_keyboard(year):
    months = [
        ("–Ø–Ω–≤", 1), ("–§–µ–≤", 2), ("–ú–∞—Ä", 3), ("–ê–ø—Ä", 4),
        ("–ú–∞–π", 5), ("–ò—é–Ω", 6), ("–ò—é–ª", 7), ("–ê–≤–≥", 8),
        ("–°–µ–Ω", 9), ("–û–∫—Ç", 10), ("–ù–æ—è", 11), ("–î–µ–∫", 12)
    ]
    buttons = []
    row = []
    for month_name, month in months:
        if year == datetime.now().year and month < datetime.now().month:
            continue
        row.append(InlineKeyboardButton(month_name, callback_data=f"deadline_date_month_{month}"))
        if len(row) == 3:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    buttons.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task")])
    return InlineKeyboardMarkup(buttons)

def create_day_keyboard(year, month):
    if month in [4, 6, 9, 11]:
        days_in_month = 30
    elif month == 2:
        days_in_month = 29 if (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)) else 28
    else:
        days_in_month = 31

    buttons = []
    row = []
    for day in range(1, days_in_month + 1):
        if year == datetime.now().year and month == datetime.now().month and day < datetime.now().day:
            continue
        row.append(InlineKeyboardButton(str(day), callback_data=f"deadline_date_day_{day}"))
        if len(row) == 5:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    buttons.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task")])
    return InlineKeyboardMarkup(buttons)

async def notify_project_status(user, project, status, context):
    try:
        if user and user.telegram_id:
            if status == 'approved':
                message = f"–í–∞—à –ø—Ä–æ–µ–∫—Ç '{project.title}' –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω!"
            else:
                message = f"–í–∞—à –ø—Ä–æ–µ–∫—Ç '{project.title}' –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω."
            
            try:
                await context.bot.send_message(
                    chat_id=user.telegram_id,
                    text=message
                )
                logger.info(f"Notification sent to {user.username} (telegram_id: {user.telegram_id}): Project {project.title} {status}")
            except Exception as e:
                logger.error(f"Failed to send notification to {user.username}: {e}")
        else:
            logger.warning(f"User {user.username if user else 'None'} has no telegram_id, notification not sent")
    except Exception as e:
        logger.error(f"Error in notify_project_status: {e}\n{traceback.format_exc()}")

def create_time_keyboard(context, is_start=True):
    buttons = []
    row = []
    # –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –ø–æ–∑–≤–æ–ª–∏—Ç—å –≤—ã–±–æ—Ä –ª—é–±–æ–≥–æ —á–∞—Å–∞
    for hour in range(24):
        # if (context.user_data.get('deadline_date') and
        #     context.user_data.get('deadline_date') == datetime.now().date() and
        #     hour < datetime.now().hour):
        #     continue  # –£–±–∏—Ä–∞–µ–º —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É
        row.append(InlineKeyboardButton(f"{hour:02d}:00", callback_data=f"deadline_{'start' if is_start else 'end'}_time_{hour}"))
        if len(row) == 4:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    buttons.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task")])
    return InlineKeyboardMarkup(buttons)

def get_pagination_keyboard(page, total_pages):
    buttons = []
    if page > 0:
        buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"photo_prev_{page}"))
    if page < total_pages - 1:
        buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"photo_next_{page}"))
    buttons.append(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_moderate"))
    return InlineKeyboardMarkup([buttons])

async def org_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    telegram_id = str(user.id)
    logger.info(f"Org menu requested by telegram_id: {telegram_id}")
    
    db_user = await get_user(telegram_id)
    if not db_user:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç.")
        return
    
    if not db_user.is_organizer:
        logger.warning(f"Access denied for telegram_id: {telegram_id}, not an organizer")
        if db_user.organization_name:
            await update.message.reply_text("–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç–∞—Ç—É—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.")
        else:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä.")
        return
    
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_org_keyboard()
    )

async def create_project_start(update, context):
    query = update.callback_query
    await query.answer()

    user = query.from_user
    telegram_id = str(user.id)
    db_user = await get_user(telegram_id)
    if not db_user or not db_user.is_organizer:
        await query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞.")
        return ConversationHandler.END

    context.user_data['telegram_id'] = telegram_id
    await query.message.reply_text(
        "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç.\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    logger.info(f"Started project creation for telegram_id: {telegram_id}")
    return TITLE

async def create_project_title(update, context):
    telegram_id = context.user_data.get('telegram_id')
    context.user_data['title'] = update.message.text.strip()
    if not context.user_data['title']:
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return TITLE
    logger.info(f"Project title set: {context.user_data['title']} for telegram_id: {telegram_id}")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
    return DESCRIPTION

async def create_project_description(update, context):
    telegram_id = context.user_data.get('telegram_id')
    context.user_data['description'] = update.message.text.strip()
    if not context.user_data['description']:
        await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        return DESCRIPTION
    logger.info(f"Project description set: {context.user_data['description']} for telegram_id: {telegram_id}")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞:")
    return CITY

async def create_project_city(update, context):
    telegram_id = context.user_data.get('telegram_id')
    context.user_data['city'] = update.message.text.strip()
    if not context.user_data['city']:
        await update.message.reply_text("–ì–æ—Ä–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")
        return CITY
    logger.info(f"Project city set: {context.user_data['city']} for telegram_id: {telegram_id}")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ –ø—Ä–æ–µ–∫—Ç–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: —É–±–æ—Ä–∫–∞, —ç–∫–æ–ª–æ–≥–∏—è):")
    return TAGS

async def create_project_tags(update, context):
    telegram_id = context.user_data.get('telegram_id')
    tags = update.message.text.strip()
    if not tags:
        await update.message.reply_text("–¢–µ–≥–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏:")
        return TAGS
    logger.info(f"Project tags set: {tags} for telegram_id: {telegram_id}")

    db_user = await get_user(telegram_id)
    title = context.user_data['title']
    description = context.user_data['description']
    city = context.user_data['city']

    try:
        project = await create_project(title, description, city, tags, db_user)
        await update.message.reply_text(
            f"–ü—Ä–æ–µ–∫—Ç '{project.title}' —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!",
            reply_markup=get_org_keyboard()
        )

        admin = await get_admin()
        if admin and admin.telegram_id:
            try:
                await context.bot.send_message(
                    chat_id=admin.telegram_id,
                    text=f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç '{project.title}' –æ—Ç {db_user.username}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."
                )
                logger.info(f"Admin {admin.username} (telegram_id: {admin.telegram_id}) notified about new project: {project.title}")
            except Exception as e:
                logger.error(f"Failed to notify admin about new project: {e}\n{traceback.format_exc()}")
        else:
            logger.warning(f"Admin not found or telegram_id missing for admin: {admin.username if admin else 'None'}")
    except Exception as e:
        logger.error(f"Error in create_project_tags: {e}\n{traceback.format_exc()}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

    context.user_data.clear()
    return ConversationHandler.END

async def create_project_cancel(update, context):
    await (update.message.reply_text if update.message else update.callback_query.message.reply_text)(
        "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_org_keyboard()
    )
    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update, context):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_org_keyboard())
    context.user_data.clear()
    return ConversationHandler.END

async def manage_volunteers(update, context):
    query = update.callback_query
    await query.answer()

    user = query.from_user
    telegram_id = str(user.id)
    db_user = await get_user(telegram_id)
    if not db_user or not db_user.is_organizer:
        await query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞.")
        return

    try:
        projects = await get_volunteers_for_project(db_user)
        if not projects:
            await query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–ª–∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤.")
            return

        response = ""
        for project_title, volunteers in projects:
            volunteers_text = ", ".join(volunteers) if volunteers else "–ù–µ—Ç –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤"
            response += f"–ü—Ä–æ–µ–∫—Ç: {project_title}\n–í–æ–ª–æ–Ω—Ç—ë—Ä—ã: {volunteers_text}\n\n"
        await query.message.reply_text(response)
    except Exception as e:
        logger.error(f"Error in manage_volunteers: {e}\n{traceback.format_exc()}")
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤.")

async def send_task_start(update, context):
    query = update.callback_query
    await query.answer()

    user = query.from_user
    telegram_id = str(user.id)
    db_user = await get_user(telegram_id)
    if not db_user or not db_user.is_organizer:
        await query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞.")
        return ConversationHandler.END

    try:
        projects = await get_organizer_projects(db_user)
        if not projects:
            await query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏–π.")
            return ConversationHandler.END

        buttons = [
            [InlineKeyboardButton(project[1], callback_data=f"task_project_{i}")]
            for i, project in enumerate(projects)
        ]
        buttons.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task")])
        keyboard = InlineKeyboardMarkup(buttons)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è:", reply_markup=keyboard)

        context.user_data['projects'] = projects
        context.user_data['organizer'] = db_user
        return SELECT_PROJECT
    except Exception as e:
        logger.error(f"Error in send_task_start: {e}\n{traceback.format_exc()}")
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞.")
        return ConversationHandler.END

async def select_project(update, context):
    query = update.callback_query
    await query.answer()

    if query.data == "cancel_task":
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_org_keyboard())
        context.user_data.clear()
        return ConversationHandler.END

    try:
        choice = int(query.data.split('_')[2])
    except (ValueError, IndexError) as e:
        logger.error(f"Invalid callback_data format: {query.data}, error: {e}\n{traceback.format_exc()}")
        await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞.")
        return ConversationHandler.END

    projects = context.user_data.get('projects', [])
    if 0 <= choice < len(projects):
        project = projects[choice][0]
        context.user_data['selected_project'] = project
        buttons = [
            [InlineKeyboardButton("–í—Å–µ–º –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞–º", callback_data="task_recipients_all"),
             InlineKeyboardButton("–û–¥–Ω–æ–º—É –≤–æ–ª–æ–Ω—Ç—ë—Ä—É", callback_data="task_recipients_one")],
            [InlineKeyboardButton("–ù–µ—Å–∫–æ–ª—å–∫–∏–º –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞–º", callback_data="task_recipients_multiple"),
             InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task")]
        ]
        keyboard = InlineKeyboardMarkup(buttons)
        await query.message.reply_text(
            f"–ü—Ä–æ–µ–∫—Ç: {project.title}\n–ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ?",
            reply_markup=keyboard
        )
        return SELECT_RECIPIENTS
    else:
        await query.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞.")
        return ConversationHandler.END

async def select_recipients(update, context):
    query = update.callback_query
    await query.answer()

    if query.data == "cancel_task":
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_org_keyboard())
        context.user_data.clear()
        return ConversationHandler.END

    project = context.user_data.get('selected_project')
    if query.data == "task_recipients_all":
        context.user_data['recipients'] = 'all'
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:")
        return TASK_TEXT
    elif query.data in ["task_recipients_one", "task_recipients_multiple"]:
        context.user_data['recipients'] = query.data
        try:
            volunteers = await get_project_volunteers(project)
            if not volunteers:
                await query.message.reply_text("–í —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ—Ç –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤.")
                return ConversationHandler.END

            buttons = [
                [InlineKeyboardButton(volunteer[1], callback_data=f"task_volunteer_{i}")]
                for i, volunteer in enumerate(volunteers)
            ]
            buttons.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task")])
            if query.data == "task_recipients_multiple":
                buttons.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="task_volunteers_done")])
            keyboard = InlineKeyboardMarkup(buttons)
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞:" if query.data == "task_recipients_one" else "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤ (–Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞):",
                reply_markup=keyboard
            )
            context.user_data['volunteers'] = volunteers
            context.user_data['selected_volunteers'] = []
            return SELECT_VOLUNTEERS
        except Exception as e:
            logger.error(f"Error in select_recipients: {e}\n{traceback.format_exc()}")
            await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤.")
            return ConversationHandler.END

async def select_volunteers(update, context):
    query = update.callback_query
    await query.answer()

    if query.data == "cancel_task":
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_org_keyboard())
        context.user_data.clear()
        return ConversationHandler.END

    if query.data == "task_volunteers_done":
        selected_volunteers = context.user_data.get('selected_volunteers', [])
        if not selected_volunteers:
            await query.message.reply_text("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return SELECT_VOLUNTEERS
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:")
        return TASK_TEXT

    try:
        choice = int(query.data.split('_')[2])
    except (ValueError, IndexError) as e:
        logger.error(f"Invalid callback_data format: {query.data}, error: {e}\n{traceback.format_exc()}")
        await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞.")
        return SELECT_VOLUNTEERS

    volunteers = context.user_data.get('volunteers', [])
    if 0 <= choice < len(volunteers):
        volunteer = volunteers[choice][0]
        if context.user_data['recipients'] == "task_recipients_one":
            context.user_data['selected_volunteers'] = [volunteer]
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:")
            return TASK_TEXT
        else:
            selected_volunteers = context.user_data.get('selected_volunteers', [])
            if volunteer not in selected_volunteers:
                selected_volunteers.append(volunteer)
                context.user_data['selected_volunteers'] = selected_volunteers
                await query.message.reply_text(f"–í—ã–±—Ä–∞–Ω –≤–æ–ª–æ–Ω—Ç—ë—Ä: {volunteer.username}. –í—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")
            else:
                await query.message.reply_text(f"–í–æ–ª–æ–Ω—Ç—ë—Ä {volunteer.username} —É–∂–µ –≤—ã–±—Ä–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")
            return SELECT_VOLUNTEERS
    else:
        await query.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞.")
        return SELECT_VOLUNTEERS

async def task_text(update, context):
    context.user_data['task_text'] = update.message.text.strip()
    if not context.user_data['task_text']:
        await update.message.reply_text("–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:")
        return TASK_TEXT
    logger.info(f"Task text set: {context.user_data['task_text']}")
    keyboard = await sync_to_async(create_year_keyboard)()
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:", reply_markup=keyboard)
    return TASK_DEADLINE_DATE

async def task_deadline_date_year(update, context):
    query = update.callback_query
    await query.answer()

    if query.data == "cancel_task":
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=get_org_keyboard())
        context.user_data.clear()
        return ConversationHandler.END

    try:
        year = int(query.data.split('_')[3])
        context.user_data['deadline_date_year'] = year
        keyboard = await sync_to_async(create_month_keyboard)(year)
        await query.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ–¥: {year}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=keyboard)
        return TASK_DEADLINE_DATE
    except (ValueError, IndexError) as e:
        logger.error(f"Invalid year selection: {query.data}, error: {e}\n{traceback.format_exc()}")
        await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –≥–æ–¥–∞.")
        return TASK_DEADLINE_DATE

async def task_deadline_date_month(update, context):
    query = update.callback_query
    await query.answer()

    if query.data == "cancel_task":
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=get_org_keyboard())
        context.user_data.clear()
        return ConversationHandler.END

    try:
        month = int(query.data.split('_')[3])
        context.user_data['deadline_date_month'] = month
        year = context.user_data['deadline_date_year']
        keyboard = await sync_to_async(create_day_keyboard)(year, month)
        await query.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ—Å—è—Ü: {month}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=keyboard)
        return TASK_DEADLINE_DATE
    except (ValueError, IndexError) as e:
        logger.error(f"Invalid month selection: {query.data}, error: {e}\n{traceback.format_exc()}")
        await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞.")
        return TASK_DEADLINE_DATE

async def task_deadline_date_day(update, context):
    query = update.callback_query
    await query.answer()

    if query.data == "cancel_task":
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=get_org_keyboard())
        context.user_data.clear()
        return ConversationHandler.END

    try:
        day = int(query.data.split('_')[3])
        year = context.user_data['deadline_date_year']
        month = context.user_data['deadline_date_month']
        deadline_date = datetime(year, month, day).date()
        context.user_data['deadline_date'] = deadline_date
        keyboard = await sync_to_async(create_time_keyboard)(context, True)
        await query.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {deadline_date}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)
        return TASK_DEADLINE_START_TIME
    except (ValueError, IndexError) as e:
        logger.error(f"Invalid day selection: {query.data}, error: {e}\n{traceback.format_exc()}")
        await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –¥–Ω—è.")
        return TASK_DEADLINE_DATE

async def task_deadline_start_time(update, context):
    query = update.callback_query
    await query.answer()

    if query.data == "cancel_task":
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=get_org_keyboard())
        context.user_data.clear()
        return ConversationHandler.END

    try:
        hour = int(query.data.split('_')[3])
        start_time = time(hour, 0)
        context.user_data['start_time'] = start_time
        keyboard = await sync_to_async(create_time_keyboard)(context, False)
        await query.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {start_time.strftime('%H:%M')}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)
        return TASK_DEADLINE_END_TIME
    except (ValueError, IndexError) as e:
        logger.error(f"Invalid start time selection: {query.data}, error: {e}\n{traceback.format_exc()}")
        await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏.")
        return TASK_DEADLINE_START_TIME

async def task_deadline_end_time(update, context):
    query = update.callback_query
    await query.answer()

    if query.data == "cancel_task":
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=get_org_keyboard())
        context.user_data.clear()
        return ConversationHandler.END

    try:
        hour = int(query.data.split('_')[3])
        end_time = time(hour, 0)
        if end_time <= context.user_data.get('start_time', time(0, 0)):
            await query.message.reply_text("–ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞.")
            return TASK_DEADLINE_END_TIME
        context.user_data['end_time'] = end_time
        buttons = [
            [InlineKeyboardButton("–î–∞", callback_data="task_photo_yes"),
             InlineKeyboardButton("–ù–µ—Ç", callback_data="task_photo_no")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task")]
        ]
        keyboard = InlineKeyboardMarkup(buttons)
        await query.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è: {end_time.strftime('%H:%M')}\n–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∫ –∑–∞–¥–∞–Ω–∏—é?", reply_markup=keyboard)
        return TASK_PHOTO

    except (ValueError, IndexError) as e:
        logger.error(f"Invalid end time selection: {query.data}, error: {e}\n{traceback.format_exc()}")
        await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏.")
        return TASK_DEADLINE_END_TIME

async def task_photo(update, context):
    query = update.callback_query
    await query.answer()

    if query.data == "cancel_task":
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=get_org_keyboard())
        context.user_data.clear()
        return ConversationHandler.END

    if query.data == "task_photo_no":
        context.user_data['task_photo'] = None
        buttons = [
            [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="task_confirm_send"),
             InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task")]
        ]
        keyboard = InlineKeyboardMarkup(buttons)
        deadline_date = context.user_data['deadline_date'].strftime('%d-%m-%Y')
        start_time = context.user_data['start_time'].strftime('%H:%M')
        end_time = context.user_data['end_time'].strftime('%H:%M')
        await query.message.reply_text(
            f"–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è: {context.user_data['task_text']}\n–°—Ä–æ–∫: {deadline_date}\n–í—Ä–µ–º—è: {start_time} - {end_time}\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:",
            reply_markup=keyboard
        )
        return CONFIRM_TASK

    if query.data == "task_photo_yes":
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è:")
        return TASK_PHOTO_UPLOAD

async def task_photo_upload(update, context):
    if update.message.photo:
        try:
            photo_file = await update.message.photo[-1].get_file()
            current_date = datetime.now()
            year, month, day = current_date.year, current_date.month, current_date.day
            save_dir = os.path.join("media", f"tasks/{year}/{month}/{day}")
            await aiofiles.os.makedirs(save_dir, exist_ok=True)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            telegram_id = str(update.message.from_user.id)
            file_name = f"{telegram_id}_{photo_file.file_id}.jpg"
            file_path = os.path.join(save_dir, file_name)

            # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ç–∞–π–º-–∞—É—Ç–∞ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
            max_retries = 3
            for attempt in range(max_retries):
                try:
                    photo_data = await photo_file.download_as_bytearray()  # –¢–∞–π–º-–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
                    if not photo_data:
                        raise ValueError("Downloaded photo data is empty")
                    async with aiofiles.open(file_path, 'wb') as f:
                        await f.write(photo_data)
                    logger.info(f"Photo saved to {file_path}")
                    break
                except TimedOut as e:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π TimedOut
                    logger.warning(f"Attempt {attempt + 1}/{max_retries} failed with timeout: {e}")
                    if attempt == max_retries - 1:
                        raise
                    await asyncio.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

                try:
                    photo_data = await photo_file.download_as_bytearray()
                except Exception as e:
                    logger.error(f"Error downloading photo: {e}")
                    await context.bot.send_message(chat_id=update.effective_chat.id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_file_path = os.path.join(f"tasks/{year}/{month}/{day}", file_name)
            context.user_data['task_photo'] = db_file_path
            buttons = [
                [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="task_confirm_send"),
                 InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task")]
            ]
            keyboard = InlineKeyboardMarkup(buttons)
            deadline_date = context.user_data['deadline_date'].strftime('%d-%m-%Y')
            start_time = context.user_data['start_time'].strftime('%H:%M')
            end_time = context.user_data['end_time'].strftime('%H:%M')
            await update.message.reply_text(
                f"–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.\n–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è: {context.user_data['task_text']}\n–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {deadline_date}\n–í—Ä–µ–º—è: {start_time} - {end_time}\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:",
                reply_markup=keyboard
            )
            return CONFIRM_TASK
        except Exception as e:
            logger.error(f"Error uploading photo for task: {e}\n{traceback.format_exc()}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return TASK_PHOTO_UPLOAD
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        return TASK_PHOTO_UPLOAD

async def confirm_task(update, context):
    query = update.callback_query
    await query.answer()

    if query.data == "cancel_task":
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=get_org_keyboard())
        context.user_data.clear()
        return ConversationHandler.END

    if query.data == "task_confirm_send":
        project = context.user_data.get('selected_project')
        organizer = context.user_data.get('organizer')
        text = context.user_data.get('task_text')
        deadline_date = context.user_data.get('deadline_date')
        start_time = context.user_data.get('start_time')
        end_time = context.user_data.get('end_time')
        photo_path = context.user_data.get('task_photo')
        recipients = context.user_data.get('recipients')
        selected_volunteers = context.user_data.get('selected_volunteers', [])

        try:
            task = await create_task(project, organizer, text, deadline_date, start_time, end_time, photo_path)
            
            if recipients == "task_recipients_all":
                # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤ —Å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
                volunteers_data = await sync_to_async(list)(VolunteerProject.objects.filter(
                    project=project
                ).select_related('volunteer'))
                logger.info(f"Found {len(volunteers_data)} VolunteerProject records for project {project.title}")
                
                volunteers = []
                for vp in volunteers_data:
                    if vp.volunteer and vp.volunteer.telegram_id:
                        volunteers.append(vp.volunteer)
                        logger.info(f"Volunteer added: {vp.volunteer.username} (telegram_id: {vp.volunteer.telegram_id})")
                    else:
                        logger.warning(f"Skipping VolunteerProject id={vp.id}: no volunteer or telegram_id")
                
                if not volunteers:
                    logger.warning(f"No valid volunteers found for project {project.title}")
                    await query.message.reply_text(
                        "–ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ –≤ –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤ —Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ telegram_id. "
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ —á–µ—Ä–µ–∑ '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤'.",
                        reply_markup=get_org_keyboard()
                    )
                    return ConversationHandler.END
            else:
                volunteers = [v for v in selected_volunteers if v.telegram_id]

            if not volunteers:
                await query.message.reply_text(
                    "–ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ –≤ –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ—Ç –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                    reply_markup=get_org_keyboard()
                )
                return ConversationHandler.END

            success_count = 0
            for volunteer in volunteers:
                try:
                    await sync_to_async(TaskAssignment.objects.create)(
                        task=task, 
                        volunteer=volunteer
                    )
                    
                    buttons = [
                        [InlineKeyboardButton("–î–∞, —Ö–æ—á—É —Ä–∞–±–æ—Ç–∞—Ç—å", callback_data=f"task_accept_{task.id}")],
                        [InlineKeyboardButton("–ù–µ—Ç, –Ω–µ —Ö–æ—á—É", callback_data=f"task_decline_{task.id}")]
                    ]
                    keyboard = InlineKeyboardMarkup(buttons)
                    
                    deadline_date_str = deadline_date.strftime('%d-%m-%Y')
                    time_range = f"{start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')}"
                    
                    message_text = (
                        f"–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project.title}:\n"
                        f"{text}\n"
                        f"–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {deadline_date_str}\n"
                        f"–í—Ä–µ–º—è: {time_range}\n"
                        "–•–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —ç—Ç–∏–º –∑–∞–¥–∞–Ω–∏–µ–º?"
                    )

                    if photo_path:
                        try:
                            async with aiofiles.open(os.path.join("media", photo_path), 'rb') as photo_file:
                                await context.bot.send_photo(
                                    chat_id=volunteer.telegram_id,
                                    photo=await photo_file.read(),
                                    caption=message_text,
                                    reply_markup=keyboard
                                )
                                success_count += 1
                        except Exception as e:
                            logger.error(f"Failed to send photo task to {volunteer.username}: {e}")
                    else:
                        await context.bot.send_message(
                            chat_id=volunteer.telegram_id,
                            text=message_text,
                            reply_markup=keyboard
                        )
                        success_count += 1
                except Exception as e:
                    logger.error(f"Failed to send task to {volunteer.username}: {e}\n{traceback.format_exc()}")

            await query.message.reply_text(
                f"–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞–º –∏–∑ {len(volunteers)}!",
                reply_markup=get_org_keyboard()
            )
            
            context.user_data.clear()
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"Error in confirm_task: {e}\n{traceback.format_exc()}")
            await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞–Ω–∏—è.")
            return ConversationHandler.END
                
async def check_photos(update, context):
    query = update.callback_query
    await query.answer() if query else None  # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞, –µ—Å–ª–∏ query –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    logger.info(f"Entering check_photos with callback_data: {getattr(query, 'data', 'No callback data')}")
    logger.info(f"context.user_data at start: {await sync_to_async(lambda: str(context.user_data))()}")

    user = query.from_user if query else update.message.from_user
    telegram_id = str(user.id)
    db_user = await get_user(telegram_id)
    if not db_user or not db_user.is_organizer:
        logger.warning(f"Access denied for telegram_id: {telegram_id}, not an organizer")
        await (update.message.reply_text if not query else query.message.reply_text)("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞.")
        return ConversationHandler.END

    page = context.user_data.get('photos_page', 0)
    try:
        photos, total = await get_pending_photos_for_organizer(db_user, page)
        logger.info(f"Fetched photos: {len(photos)} photos, total: {total}")
        if not photos:
            logger.info("No pending photos found")
            await (update.message.reply_text if not query else query.message.reply_text)("–ù–µ—Ç —Ñ–æ—Ç–æ, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            return ConversationHandler.END

        total_pages = (total + PHOTOS_PER_PAGE - 1) // PHOTOS_PER_PAGE
        context.user_data['pending_photos'] = photos
        context.user_data['photos_page'] = page
        context.user_data['selected_photo'] = photos[0][0]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
        logger.info(f"Saved pending_photos: {len(photos)} photos, page: {page}, total_pages: {total_pages}, selected_photo: {photos[0][0].id}")

        photo, volunteer_username, project_title, task = photos[0]
        logger.info(f"Processing photo: id={photo.id}, path={photo.image.path}")
        if not await sync_to_async(os.path.exists)(photo.image.path):
            logger.error(f"File not found: {photo.image.path}")
            await query.message.reply_text("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END

        async with aiofiles.open(photo.image.path, 'rb') as photo_file:
            buttons = [
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data=f"mod_photo_action_0_approve"),
                 InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"mod_photo_action_0_reject")]
            ]
            keyboard = InlineKeyboardMarkup(buttons)
            logger.info(f"Sending photo with keyboard: {buttons}")
            deadline_date = task.deadline_date.strftime('%d-%m-%Y') if task else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            time_range = f"{task.start_time.strftime('%H:%M')} - {task.end_time.strftime('%H:%M')}" if task else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            await (update.message.reply_photo if not query else query.message.reply_photo)(
                photo=await photo_file.read(),
                caption=f"–§–æ—Ç–æ –æ—Ç {volunteer_username} (–ø—Ä–æ–µ–∫—Ç: {project_title})\n–ó–∞–¥–∞–Ω–∏–µ: {task.text if task else '–ù–µ—Ç –∑–∞–¥–∞–Ω–∏—è'}\n–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {deadline_date}\n–í—Ä–µ–º—è: {time_range}",
                reply_markup=keyboard
            )

        keyboard = get_pagination_keyboard(page, total_pages)
        await (update.message.reply_text if not query else query.message.reply_text)(
            f"–§–æ—Ç–æ, –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):",
            reply_markup=keyboard
        )
        logger.info(f"Transitioning to MODERATE_PHOTO state")
        return MODERATE_PHOTO
    except Exception as e:
        logger.error(f"Error in check_photos: {e}\n{traceback.format_exc()}")
        await (update.message.reply_text if not query else query.message.reply_text)(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {str(e)}")
        return ConversationHandler.END

async def handle_photo_moderation_selection(update, context):
    query = update.callback_query
    await query.answer()
    logger.info(f"Received callback_data in handle_photo_moderation_selection: {query.data}")
    logger.info(f"context.user_data in handle_photo_moderation_selection: {await sync_to_async(lambda: str(context.user_data))()}")

    if query.data == "cancel_moderate":
        logger.info("Canceling photo moderation")
        await query.message.reply_text("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ç–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_org_keyboard())
        context.user_data.clear()
        return ConversationHandler.END

    if not query.data.startswith("photo_"):
        logger.warning(f"Unexpected callback_data in handle_photo_moderation_selection: {query.data}")
        await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        return MODERATE_PHOTO

    try:
        action, page = query.data.split('_')[1:3]
        page = int(page)
        logger.info(f"Pagination action: {action}, page: {page}")
    except (ValueError, IndexError) as e:
        logger.error(f"Invalid pagination callback_data: {query.data}, error: {e}\n{traceback.format_exc()}")
        await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.")
        return MODERATE_PHOTO

    if action == "prev":
        page -= 1
    elif action == "next":
        page += 1
    else:
        logger.error(f"Unknown pagination action: {action}")
        await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.")
        return MODERATE_PHOTO

    context.user_data['photos_page'] = page
    user = query.from_user
    telegram_id = str(user.id)
    db_user = await get_user(telegram_id)
    try:
        context.user_data['photos_page'] = page
        photos, total = await get_pending_photos_for_organizer(db_user, page)
        total_pages = (total + PHOTOS_PER_PAGE - 1) // PHOTOS_PER_PAGE
        context.user_data['pending_photos'] = photos
        context.user_data['selected_photo'] = photos[0][0] if photos else None
        logger.info(f"Updated pending_photos: {len(photos)} photos, page: {page}, total_pages: {total_pages}")

        if not photos:
            logger.info("No photos on this page")
            await query.message.reply_text("–ù–µ—Ç —Ñ–æ—Ç–æ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.", reply_markup=get_org_keyboard())
            context.user_data.clear()
            return ConversationHandler.END

        photo, volunteer_username, project_title, task = photos[0]
        if not await sync_to_async(os.path.exists)(photo.image.path):
            logger.error(f"File not found: {photo.image.path}")
            await query.message.reply_text(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Ñ–æ—Ç–æ {photo.image.path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END

        async with aiofiles.open(photo.image.path, 'rb') as photo_file:
            buttons = [
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data=f"mod_photo_action_0_approve"),
                 InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"mod_photo_action_0_reject")]
            ]
            keyboard = InlineKeyboardMarkup(buttons)
            logger.info(f"Sending photo with keyboard: {buttons}")
            deadline_date = task.deadline_date.strftime('%d-%m-%Y') if task else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            time_range = f"{task.start_time.strftime('%H:%M')} - {task.end_time.strftime('%H:%M')}" if task else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            await query.message.reply_photo(
                photo=await photo_file.read(),
                caption=f"–§–æ—Ç–æ –æ—Ç {volunteer_username} (–ø—Ä–æ–µ–∫—Ç: {project_title})\n–ó–∞–¥–∞–Ω–∏–µ: {task.text if task else '–ù–µ—Ç –∑–∞–¥–∞–Ω–∏—è'}\n–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {deadline_date}\n–í—Ä–µ–º—è: {time_range}",
                reply_markup=keyboard
            )

        keyboard = get_pagination_keyboard(page, total_pages)
        await query.message.reply_text(
            f"–§–æ—Ç–æ, –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):",
            reply_markup=keyboard
        )
        return MODERATE_PHOTO
    except Exception as e:
        logger.error(f"Error in handle_photo_moderation_selection: {e}\n{traceback.format_exc()}")
        await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {str(e)}")
        return MODERATE_PHOTO

async def handle_photo_moderation_action(update, context):
    query = update.callback_query
    await query.answer()
    logger.info(f"Processing photo moderation action with data: {query.data}")

    if not context.user_data.get('pending_photos'):
        logger.error("No pending_photos in context.user_data")
        await query.message.reply_text("–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return ConversationHandler.END

    try:
        parts = query.data.split('_')
        if len(parts) != 5 or parts[0:3] != ['mod', 'photo', 'action']:
            logger.error(f"Invalid callback_data structure: {query.data}")
            await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
            return ConversationHandler.END
        choice = int(parts[3])
        action = parts[4]
    except (ValueError, IndexError) as e:
        logger.error(f"Invalid callback_data format: {query.data}, error: {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return ConversationHandler.END

    photos = context.user_data.get('pending_photos', [])
    if not (0 <= choice < len(photos)):
        logger.error(f"Invalid photo choice: {choice}, available photos: {len(photos)}")
        await query.message.reply_text("–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        return ConversationHandler.END

    photo, volunteer_username, project_title, task = photos[choice]
    context.user_data['selected_photo'] = photo

    try:
        if action == "approve":
            await approve_photo(photo)
            rating_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(str(i), callback_data=f"rating_{i}") for i in range(1, 6)],
                [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="rating_skip")]
            ])
            await query.message.reply_text(
                f"–§–æ—Ç–æ –æ—Ç {volunteer_username} –æ–¥–æ–±—Ä–µ–Ω–æ. –û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞ (1‚Äì5 –∑–≤—ë–∑–¥):",
                reply_markup=rating_keyboard
            )
            context.user_data['awaiting_rating_for'] = photo.id
            return MODERATE_PHOTO_ACTION
        elif action == "reject":
            await reject_photo(photo, context)
            deadline_date = task.deadline_date.strftime('%d-%m-%Y') if task else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            time_range = f"{task.start_time.strftime('%H:%M')} - {task.end_time.strftime('%H:%M')}" if task else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            await query.message.edit_caption(
                caption=f"–§–æ—Ç–æ –æ—Ç {volunteer_username} (–ø—Ä–æ–µ–∫—Ç: {project_title})\n–ó–∞–¥–∞–Ω–∏–µ: {task.text if task else '–ù–µ—Ç –∑–∞–¥–∞–Ω–∏—è'}\n–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {deadline_date}\n–í—Ä–µ–º—è: {time_range}\n[–û—Ç–∫–ª–æ–Ω–µ–Ω–æ]"
            )
            return await show_next_photo(update, context)
        else:
            logger.error(f"Unknown action: {action}")
            await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
            return MODERATE_PHOTO
    except Exception as e:
        logger.error(f"Failed to process action '{action}' for photo {photo.id}: {e}")
        await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
        return ConversationHandler.END
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /moderate_photos
async def moderate_photos_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"Received /moderate_photos command from telegram_id: {update.message.from_user.id}")
    user = update.message.from_user
    telegram_id = str(user.id)
    db_user = await get_user(telegram_id)
    if not db_user or not db_user.is_organizer:
        logger.warning(f"Access denied for telegram_id: {telegram_id}, not an organizer")
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞.")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ Update —Å callback_query
    fake_query = type('FakeQuery', (), {
        'data': 'check_photos',
        'from_user': user,
        'message': update.message,
        'answer': lambda *args: None  # –ü—É—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ answer
    })()
    new_update = Update(
        update_id=update.update_id,
        message=update.message,
        callback_query=fake_query
    )
    await check_photos(new_update, context)

async def provide_feedback(update, context):
    query = update.callback_query
    await query.answer()

    task = context.user_data.get('selected_task')
    if not task:
        await query.message.reply_text("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return ConversationHandler.END

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(str(i), callback_data=f"feedback_{i}") for i in range(1, 6)],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_feedback")]
    ])
    await query.message.reply_text("–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞ (1-5):", reply_markup=keyboard)
    return FEEDBACK

async def handle_rating_selection(update, context):
    query = update.callback_query
    await query.answer()

    if not context.user_data.get('awaiting_rating_for'):
        await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏.")
        return MODERATE_PHOTO

    try:
        photo_id = context.user_data['awaiting_rating_for']
        photo = await sync_to_async(Photo.objects.select_related('volunteer').get)(id=photo_id)

        if query.data == "rating_skip":
            rating = None
            message = "–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞."
            photo.status = 'approved'
            photo.moderated_at = timezone.now()
            await sync_to_async(photo.save)()
        else:
            rating = int(query.data.split('_')[1])
            photo.rating = rating
            photo.status = 'approved'
            photo.moderated_at = timezone.now()
            await sync_to_async(photo.save)()
            if rating:
                volunteer = photo.volunteer
                volunteer.rating = min(100, volunteer.rating + rating * 2)
                await sync_to_async(volunteer.save)()
            message = f"–û—Ü–µ–Ω–∫–∞ {rating}‚òÖ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."

        if photo.volunteer.telegram_id:
            if rating:
                await context.bot.send_message(
                    chat_id=photo.volunteer.telegram_id,
                    text=f"–í–∞—à–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {photo.project.title} –±—ã–ª–æ –æ–¥–æ–±—Ä–µ–Ω–æ! –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {rating}‚òÖ"
                )
            else:
                await context.bot.send_message(
                    chat_id=photo.volunteer.telegram_id,
                    text=f"–í–∞—à–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {photo.project.title} –±—ã–ª–æ –æ–¥–æ–±—Ä–µ–Ω–æ!"
                )

        await query.message.edit_text(f"{message} –°–ø–∞—Å–∏–±–æ!")
        return await show_next_photo(update, context)
    except Exception as e:
        logger.error(f"Error handling rating: {e}\n{traceback.format_exc()}")
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏.")
        return MODERATE_PHOTO
    

async def show_next_photo(update, context):
    query = update.callback_query
    page = context.user_data.get('photos_page', 0)
    user = query.from_user
    telegram_id = str(user.id)
    db_user = await get_user(telegram_id)
    
    try:
        photos, total = await get_pending_photos_for_organizer(db_user, page)
        total_pages = (total + PHOTOS_PER_PAGE - 1) // PHOTOS_PER_PAGE
        
        if photos:
            photo, volunteer_username, project_title, task = photos[0]
            context.user_data['pending_photos'] = photos
            context.user_data['selected_photo'] = photo
            
            if not await sync_to_async(os.path.exists)(photo.image.path):
                logger.error(f"File not found: {photo.image.path}")
                await query.message.reply_text(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Ñ–æ—Ç–æ {photo.image.path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return ConversationHandler.END

            async with aiofiles.open(photo.image.path, 'rb') as photo_file:
                buttons = [
                    [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data=f"mod_photo_action_0_approve"),
                     InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"mod_photo_action_0_reject")]
                ]
                keyboard = InlineKeyboardMarkup(buttons)
                
                deadline_date = task.deadline_date.strftime('%d-%m-%Y') if task else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                time_range = f"{task.start_time.strftime('%H:%M')} - {task.end_time.strftime('%H:%M')}" if task else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                
                await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=await photo_file.read(),
                    caption=f"–§–æ—Ç–æ –æ—Ç {volunteer_username} (–ø—Ä–æ–µ–∫—Ç: {project_title})\n–ó–∞–¥–∞–Ω–∏–µ: {task.text if task else '–ù–µ—Ç –∑–∞–¥–∞–Ω–∏—è'}\n–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {deadline_date}\n–í—Ä–µ–º—è: {time_range}",
                    reply_markup=keyboard
                )

            keyboard = get_pagination_keyboard(page, total_pages)
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"–§–æ—Ç–æ, –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):",
                reply_markup=keyboard
            )
            return MODERATE_PHOTO
        else:
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="–ë–æ–ª—å—à–µ –Ω–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
                reply_markup=get_org_keyboard()
            )
            context.user_data.clear()
            return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error showing next photo: {e}\n{traceback.format_exc()}")
        await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ç–æ: {str(e)}")
        return ConversationHandler.END

async def feedback_rating(update, context):
    query = update.callback_query
    await query.answer()

    if query.data == "cancel_feedback":
        await query.message.reply_text("–û—Ç–∑—ã–≤ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=get_org_keyboard())
        context.user_data.clear()
        return ConversationHandler.END

    try:
        rating = int(query.data.split('_')[1])
        context.user_data['feedback_rating'] = rating
        await query.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
        return FEEDBACK
    except Exception as e:
        logger.error(f"Error in feedback_rating: {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return FEEDBACK

async def feedback_comment(update, context):
    if update.message.text == "/skip":
        comment = None
    else:
        comment = update.message.text.strip()

    task = context.user_data.get('selected_task')
    volunteer = context.user_data.get('selected_volunteer')
    rating = context.user_data.get('feedback_rating')

    if not all([task, volunteer, rating]):
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞.")
        context.user_data.clear()
        return ConversationHandler.END

    try:
        # –ü–æ–ª—É—á–∞–µ–º assignment –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        assignment = await sync_to_async(TaskAssignment.objects.get)(task=task, volunteer=volunteer)
        assignment.rating = rating
        assignment.feedback = comment
        await sync_to_async(assignment.save)()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞
        volunteer.rating = min(100, volunteer.rating + rating * 2)  # –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ
        await sync_to_async(volunteer.save)()

        await update.message.reply_text("–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=get_org_keyboard())
    except Exception as e:
        logger.error(f"Error saving feedback: {e}\n{traceback.format_exc()}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.")

    context.user_data.clear()
    return ConversationHandler.END

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers(application):
    create_project_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(create_project_start, pattern=r"^create_project"),
            CommandHandler("org", org_menu)
        ],
        states={
            TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, create_project_title)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, create_project_description)],
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, create_project_city)],
            TAGS: [MessageHandler(filters.TEXT & ~filters.COMMAND, create_project_tags)],
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            CallbackQueryHandler(create_project_cancel, pattern=r"^cancel_task")
        ],
        per_message=False
    )
    application.add_handler(create_project_conv)

    send_task_conv = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(send_task_start, pattern=r"^send_task")
    ],
    states={
        SELECT_PROJECT: [CallbackQueryHandler(select_project, pattern=r"^(task_project_|cancel_task)")],
        SELECT_RECIPIENTS: [CallbackQueryHandler(select_recipients, pattern=r"^(task_recipients_|cancel_task)")],
        SELECT_VOLUNTEERS: [CallbackQueryHandler(select_volunteers, pattern=r"^(task_volunteer_|task_volunteers_done|cancel_task)")],
        TASK_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, task_text)],
        TASK_DEADLINE_DATE: [
            CallbackQueryHandler(task_deadline_date_year, pattern=r"^deadline_date_year_"),
            CallbackQueryHandler(task_deadline_date_month, pattern=r"^deadline_date_month_"),
            CallbackQueryHandler(task_deadline_date_day, pattern=r"^deadline_date_day_")
        ],
        TASK_DEADLINE_START_TIME: [CallbackQueryHandler(task_deadline_start_time, pattern=r"^deadline_start_time_")],
        TASK_DEADLINE_END_TIME: [CallbackQueryHandler(task_deadline_end_time, pattern=r"^deadline_end_time_")],
        TASK_PHOTO: [CallbackQueryHandler(task_photo, pattern=r"^(task_photo_|cancel_task)")],
        TASK_PHOTO_UPLOAD: [MessageHandler(filters.PHOTO, task_photo_upload)],
        CONFIRM_TASK: [CallbackQueryHandler(confirm_task, pattern=r"^(task_confirm_send|cancel_task)")]
    },
    fallbacks=[
        CallbackQueryHandler(create_project_cancel, pattern=r"^cancel_task")
    ],
    per_message=False
)
    application.add_handler(send_task_conv)

    moderate_photo_conv = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(check_photos, pattern=r"^check_photos"),
        CommandHandler("moderate_photos", moderate_photos_command)
    ],
    states={
        MODERATE_PHOTO: [
            CallbackQueryHandler(handle_photo_moderation_selection, pattern=r"^(photo_prev_|photo_next_|cancel_moderate)"),
            CallbackQueryHandler(handle_photo_moderation_action, pattern=r"^mod_photo_action_\d+_(approve|reject)")
        ],
        MODERATE_PHOTO_ACTION: [
            CallbackQueryHandler(handle_rating_selection, pattern=r"^rating_"),
            CallbackQueryHandler(handle_photo_moderation_selection, pattern=r"^(photo_prev_|photo_next_|cancel_moderate)")
        ]
    },
    fallbacks=[
        CallbackQueryHandler(handle_photo_moderation_selection, pattern=r"^cancel_moderate")
    ],
    per_message=False
)
    application.add_handler(moderate_photo_conv)
    

    application.add_handler(CallbackQueryHandler(manage_volunteers, pattern=r"^manage_volunteers$"))
